{
	"detailedDesign": {
		"implementationSummary": "Supabase認証を使用したカードベースのモダンなログイン画面実装。FSDアーキテクチャに準拠し、Svelte 5の新しいRunes APIを使用。Melt UIのcreateFormビルダーとの統合により、優れたUXとアクセシビリティを実現。",

		"architecture": {
			"fsdLayers": {
				"shared": {
					"description": "基本UIコンポーネントと共通ユーティリティ",
					"files": [
						{
							"path": "src/shared/components/ui/Card.svelte",
							"purpose": "カードコンポーネント（shadow、padding、radiusサポート）"
						},
						{
							"path": "src/shared/components/ui/Button.svelte",
							"purpose": "ボタンコンポーネント（loading、disabled状態サポート）"
						},
						{
							"path": "src/shared/components/ui/Input.svelte",
							"purpose": "入力フィールドコンポーネント（error状態、ARIA属性サポート）"
						},
						{
							"path": "src/shared/components/ui/Alert.svelte",
							"purpose": "アラートコンポーネント（error、success、warning、info）"
						},
						{
							"path": "src/shared/components/ui/Label.svelte",
							"purpose": "フォームラベルコンポーネント"
						},
						{
							"path": "src/shared/components/ui/Icon.svelte",
							"purpose": "アイコンコンポーネント（目のアイコンなど）"
						},
						{
							"path": "src/shared/api/supabase.ts",
							"purpose": "Supabaseクライアントの初期化"
						},
						{
							"path": "src/shared/utils/validation.ts",
							"purpose": "バリデーションユーティリティ関数"
						},
						{
							"path": "src/shared/components/model/types.ts",
							"purpose": "共通UIコンポーネントの型定義"
						}
					]
				},
				"entities": {
					"description": "ユーザーエンティティとビジネスUI",
					"files": [
						{
							"path": "src/entities/user/model/types.ts",
							"purpose": "ユーザーエンティティの型定義"
						},
						{
							"path": "src/entities/user/ui/UserCredentialsCard.svelte",
							"purpose": "ユーザー認証情報入力カード（shared/componentsの集合体）"
						}
					]
				},
				"features": {
					"description": "ログイン機能の実装",
					"files": [
						{
							"path": "src/features/auth-login/model/loginSchema.ts",
							"purpose": "ログインフォームのZodスキーマ定義"
						},
						{
							"path": "src/features/auth-login/api/supabaseAuth.ts",
							"purpose": "Supabase認証APIラッパー"
						},
						{
							"path": "src/features/auth-login/composable/useLogin.svelte.ts",
							"purpose": "ログインビジネスロジック（Svelte 5 Runes使用）"
						},
						{
							"path": "src/features/auth-login/ui/LoginForm.svelte",
							"purpose": "ログインフォームコンポーネント（entities/uiの集合体）"
						}
					]
				},
				"routes": {
					"description": "ログインページ",
					"files": [
						{
							"path": "src/routes/login/+page.svelte",
							"purpose": "ログインページ（features/uiのコンポーネント配置）"
						}
					]
				}
			}
		},

		"detailedImplementation": {
			"styleDefinitions": {
				"description": "app.cssでのクラスベース設計",
				"file": "src/app.css",
				"content": "@import 'tailwindcss';\n\n/* 10テーマシステム */\n:root {\n  /* Theme 1: Blue Professional */\n  --color-primary-600: #2563eb;\n  --color-primary-700: #1d4ed8;\n  --color-secondary-600: #4b5563;\n  --color-error-600: #dc2626;\n  --color-success-600: #16a34a;\n  --color-bg-card: #ffffff;\n  --color-bg-page: #f9fafb;\n  --color-text-primary: #111827;\n  --color-text-secondary: #6b7280;\n  --color-border: #e5e7eb;\n}\n\n/* 12グリッドシステム */\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: 1rem;\n}\n\n.col-span-1 { grid-column: span 1; }\n.col-span-2 { grid-column: span 2; }\n.col-span-3 { grid-column: span 3; }\n.col-span-4 { grid-column: span 4; }\n.col-span-6 { grid-column: span 6; }\n.col-span-12 { grid-column: span 12; }\n\n/* カードスタイル */\n.card {\n  background-color: var(--color-bg-card);\n  border-radius: 0.75rem;\n  box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);\n}\n\n.card-padding-sm { padding: 1rem; }\n.card-padding-md { padding: 1.5rem; }\n.card-padding-lg { padding: 2rem; }\n.card-padding-xl { padding: 2.5rem; }\n\n.card-shadow-none { box-shadow: none; }\n.card-shadow-sm { box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05); }\n.card-shadow-md { box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1); }\n.card-shadow-lg { box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1); }\n.card-shadow-xl { box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1); }\n\n/* ボタンスタイル */\n.btn {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  transition: all 0.2s;\n  border-radius: 0.375rem;\n  outline: none;\n  focus-visible: ring-2 ring-offset-2;\n}\n\n.btn-primary {\n  background-color: var(--color-primary-600);\n  color: white;\n}\n\n.btn-primary:hover:not(:disabled) {\n  background-color: var(--color-primary-700);\n  transform: scale(1.02);\n}\n\n.btn-size-sm { padding: 0.5rem 1rem; font-size: 0.875rem; }\n.btn-size-md { padding: 0.75rem 1.5rem; font-size: 1rem; }\n.btn-size-lg { padding: 1rem 2rem; font-size: 1.125rem; }\n\n.btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n/* 入力フィールドスタイル */\n.input {\n  width: 100%;\n  padding: 0.625rem 0.875rem;\n  font-size: 1rem;\n  border: 1px solid var(--color-border);\n  border-radius: 0.375rem;\n  background-color: white;\n  transition: all 0.2s;\n}\n\n.input:focus {\n  outline: none;\n  border-color: var(--color-primary-600);\n  ring: 2px;\n  ring-color: var(--color-primary-600);\n  ring-opacity: 0.2;\n}\n\n.input-error {\n  border-color: var(--color-error-600);\n}\n\n/* アラートスタイル */\n.alert {\n  padding: 1rem;\n  border-radius: 0.5rem;\n  display: flex;\n  align-items: flex-start;\n  gap: 0.75rem;\n}\n\n.alert-error {\n  background-color: #fef2f2;\n  color: var(--color-error-600);\n  border: 1px solid #fecaca;\n}\n\n/* フォームスタイル */\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 0.375rem;\n}\n\n.form-label {\n  font-size: 0.875rem;\n  font-weight: 500;\n  color: var(--color-text-primary);\n}\n\n.form-error {\n  font-size: 0.75rem;\n  color: var(--color-error-600);\n  margin-top: 0.25rem;\n}\n\n/* ローディングスピナー */\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n.spinner {\n  width: 1.25rem;\n  height: 1.25rem;\n  border: 2px solid transparent;\n  border-top-color: white;\n  border-radius: 50%;\n  animation: spin 0.6s linear infinite;\n}\n\n/* レスポンシブ対応 */\n@media (max-width: 640px) {\n  .card-padding-md { padding: 1rem; }\n  .card-padding-lg { padding: 1.5rem; }\n  .col-span-sm-12 { grid-column: span 12; }\n}"
			},

			"componentImplementations": {
				"shared": {
					"Card": {
						"path": "src/shared/components/ui/Card.svelte",
						"code": "<script lang=\"ts\">\n\timport type { CardProps } from '$shared/components/model/types';\n\n\tlet {\n\t\tclass: className = '',\n\t\tpadding = 'md',\n\t\tshadow = 'md',\n\t\tradius = 'md',\n\t\tchildren\n\t}: CardProps = $props();\n\n\tconst paddingClasses = {\n\t\tsm: 'card-padding-sm',\n\t\tmd: 'card-padding-md',\n\t\tlg: 'card-padding-lg',\n\t\txl: 'card-padding-xl'\n\t};\n\n\tconst shadowClasses = {\n\t\tnone: 'card-shadow-none',\n\t\tsm: 'card-shadow-sm',\n\t\tmd: 'card-shadow-md',\n\t\tlg: 'card-shadow-lg',\n\t\txl: 'card-shadow-xl'\n\t};\n\n\tconst classes = $derived(\n\t\t`card ${paddingClasses[padding]} ${shadowClasses[shadow]} ${className}`\n\t);\n</script>\n\n<div class={classes} {...$$restProps}>\n\t{@render children?.()}\n</div>"
					},

					"Button": {
						"path": "src/shared/components/ui/Button.svelte",
						"code": "<script lang=\"ts\">\n\timport type { ButtonProps } from '$shared/components/model/types';\n\n\tlet {\n\t\tvariant = 'primary',\n\t\tsize = 'md',\n\t\tdisabled = false,\n\t\tloading = false,\n\t\ttype = 'button',\n\t\tclass: className = '',\n\t\tonclick,\n\t\tchildren\n\t}: ButtonProps = $props();\n\n\tconst variantClasses = {\n\t\tprimary: 'btn-primary',\n\t\tsecondary: 'btn-secondary',\n\t\tghost: 'btn-ghost',\n\t\tdanger: 'btn-danger'\n\t};\n\n\tconst sizeClasses = {\n\t\tsm: 'btn-size-sm',\n\t\tmd: 'btn-size-md',\n\t\tlg: 'btn-size-lg'\n\t};\n\n\tconst isDisabled = $derived(disabled || loading);\n\tconst classes = $derived(\n\t\t`btn ${variantClasses[variant]} ${sizeClasses[size]} ${className}`\n\t);\n</script>\n\n<button\n\t{type}\n\tclass={classes}\n\tdisabled={isDisabled}\n\t{onclick}\n\taria-busy={loading}\n\t{...$$restProps}\n>\n\t{#if loading}\n\t\t<span class=\"spinner\" aria-hidden=\"true\"></span>\n\t{/if}\n\t{@render children?.()}\n</button>"
					},

					"Input": {
						"path": "src/shared/components/ui/Input.svelte",
						"code": "<script lang=\"ts\">\n\timport type { InputProps } from '$shared/components/model/types';\n\n\tlet {\n\t\ttype = 'text',\n\t\tvalue = $bindable(''),\n\t\tplaceholder = '',\n\t\tdisabled = false,\n\t\terror = false,\n\t\trequired = false,\n\t\tautocomplete,\n\t\tid,\n\t\tname,\n\t\tclass: className = ''\n\t}: InputProps = $props();\n\n\tconst classes = $derived(\n\t\t`input ${error ? 'input-error' : ''} ${className}`\n\t);\n</script>\n\n<input\n\t{type}\n\tbind:value\n\t{placeholder}\n\t{disabled}\n\t{required}\n\t{autocomplete}\n\t{id}\n\t{name}\n\tclass={classes}\n\taria-invalid={error}\n\taria-required={required}\n\t{...$$restProps}\n/>"
					},

					"Alert": {
						"path": "src/shared/components/ui/Alert.svelte",
						"code": "<script lang=\"ts\">\n\timport type { AlertProps } from '$shared/components/model/types';\n\timport Icon from './Icon.svelte';\n\n\tlet {\n\t\ttype = 'info',\n\t\ttitle = '',\n\t\tmessage,\n\t\tdismissible = false,\n\t\ticon = true,\n\t\tonDismiss\n\t}: AlertProps = $props();\n\n\tconst typeClasses = {\n\t\terror: 'alert-error',\n\t\tsuccess: 'alert-success',\n\t\twarning: 'alert-warning',\n\t\tinfo: 'alert-info'\n\t};\n\n\tconst iconNames = {\n\t\terror: 'error-circle',\n\t\tsuccess: 'check-circle',\n\t\twarning: 'warning',\n\t\tinfo: 'info-circle'\n\t};\n\n\tconst classes = $derived(`alert ${typeClasses[type]}`);\n</script>\n\n<div class={classes} role=\"alert\" aria-live=\"assertive\">\n\t{#if icon}\n\t\t<Icon name={iconNames[type]} class=\"alert-icon\" />\n\t{/if}\n\t<div class=\"alert-content\">\n\t\t{#if title}\n\t\t\t<h3 class=\"alert-title\">{title}</h3>\n\t\t{/if}\n\t\t<p class=\"alert-message\">{message}</p>\n\t</div>\n\t{#if dismissible}\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\tclass=\"alert-dismiss\"\n\t\t\tonclick={onDismiss}\n\t\t\taria-label=\"閉じる\"\n\t\t>\n\t\t\t<Icon name=\"close\" />\n\t\t</button>\n\t{/if}\n</div>"
					},

					"supabase": {
						"path": "src/shared/api/supabase.ts",
						"code": "import { createClient } from '@supabase/supabase-js';\nimport { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';\n\nif (!PUBLIC_SUPABASE_URL || !PUBLIC_SUPABASE_ANON_KEY) {\n\tthrow new Error('Missing Supabase environment variables');\n}\n\nexport const supabase = createClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\n\tauth: {\n\t\tpersistSession: true,\n\t\tautoRefreshToken: true,\n\t\tdetectSessionInUrl: true\n\t}\n});\n\nexport type SupabaseClient = typeof supabase;"
					},

					"validation": {
						"path": "src/shared/utils/validation.ts",
						"code": "/**\n * メールアドレスの形式を検証\n */\nexport function validateEmail(email: string): boolean {\n\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\treturn emailRegex.test(email);\n}\n\n/**\n * パスワードの強度を検証\n */\nexport function validatePassword(password: string): {\n\tvalid: boolean;\n\terrors: string[];\n} {\n\tconst errors: string[] = [];\n\n\tif (password.length < 6) {\n\t\terrors.push('パスワードは6文字以上である必要があります');\n\t}\n\n\treturn {\n\t\tvalid: errors.length === 0,\n\t\terrors\n\t};\n}\n\n/**\n * 必須フィールドの検証\n */\nexport function validateRequired(value: string, fieldName: string): string | null {\n\tif (!value || value.trim() === '') {\n\t\treturn `${fieldName}は必須項目です`;\n\t}\n\treturn null;\n}"
					}
				},

				"entities": {
					"userTypes": {
						"path": "src/entities/user/model/types.ts",
						"code": "/**\n * ユーザー認証情報\n */\nexport interface UserCredentials {\n\temail: string;\n\tpassword: string;\n}\n\n/**\n * ユーザー情報\n */\nexport interface User {\n\tid: string;\n\temail: string;\n\tcreated_at: string;\n\tupdated_at?: string;\n}\n\n/**\n * ユーザーセッション\n */\nexport interface UserSession {\n\taccess_token: string;\n\trefresh_token: string;\n\texpires_at: number;\n\tuser: User;\n}\n\n/**\n * 認証エラー\n */\nexport interface AuthError {\n\tcode: string;\n\tmessage: string;\n\tdetails?: Record<string, unknown>;\n}"
					},

					"UserCredentialsCard": {
						"path": "src/entities/user/ui/UserCredentialsCard.svelte",
						"code": "<script lang=\"ts\">\n\timport Card from '$shared/components/ui/Card.svelte';\n\timport Input from '$shared/components/ui/Input.svelte';\n\timport Label from '$shared/components/ui/Label.svelte';\n\timport Button from '$shared/components/ui/Button.svelte';\n\timport Icon from '$shared/components/ui/Icon.svelte';\n\timport type { UserCredentials } from '../model/types';\n\n\tinterface Props {\n\t\temail: string;\n\t\tpassword: string;\n\t\temailError?: string;\n\t\tpasswordError?: string;\n\t\tonSubmit: () => void;\n\t\tloading?: boolean;\n\t}\n\n\tlet {\n\t\temail = $bindable(''),\n\t\tpassword = $bindable(''),\n\t\temailError,\n\t\tpasswordError,\n\t\tonSubmit,\n\t\tloading = false\n\t}: Props = $props();\n\n\tlet showPassword = $state(false);\n\n\tfunction togglePasswordVisibility() {\n\t\tshowPassword = !showPassword;\n\t}\n\n\tfunction handleSubmit(e: Event) {\n\t\te.preventDefault();\n\t\tonSubmit();\n\t}\n</script>\n\n<Card padding=\"lg\" shadow=\"lg\" class=\"max-w-md mx-auto\">\n\t<form onsubmit={handleSubmit} class=\"space-y-6\">\n\t\t<div class=\"text-center mb-8\">\n\t\t\t<h1 class=\"text-2xl font-semibold text-gray-900\">ログイン</h1>\n\t\t\t<p class=\"mt-2 text-sm text-gray-600\">\n\t\t\t\tアカウントにログインしてください\n\t\t\t</p>\n\t\t</div>\n\n\t\t<div class=\"form-group\">\n\t\t\t<Label for=\"email\" required>\n\t\t\t\tメールアドレス\n\t\t\t</Label>\n\t\t\t<Input\n\t\t\t\tid=\"email\"\n\t\t\t\tname=\"email\"\n\t\t\t\ttype=\"email\"\n\t\t\t\tbind:value={email}\n\t\t\t\tplaceholder=\"example@example.com\"\n\t\t\t\tautocomplete=\"email\"\n\t\t\t\trequired\n\t\t\t\terror={!!emailError}\n\t\t\t\tdisabled={loading}\n\t\t\t\taria-label=\"メールアドレス\"\n\t\t\t\taria-describedby={emailError ? 'email-error' : undefined}\n\t\t\t/>\n\t\t\t{#if emailError}\n\t\t\t\t<span id=\"email-error\" class=\"form-error\">{emailError}</span>\n\t\t\t{/if}\n\t\t</div>\n\n\t\t<div class=\"form-group\">\n\t\t\t<Label for=\"password\" required>\n\t\t\t\tパスワード\n\t\t\t</Label>\n\t\t\t<div class=\"relative\">\n\t\t\t\t<Input\n\t\t\t\t\tid=\"password\"\n\t\t\t\t\tname=\"password\"\n\t\t\t\t\ttype={showPassword ? 'text' : 'password'}\n\t\t\t\t\tbind:value={password}\n\t\t\t\t\tplaceholder=\"••••••••\"\n\t\t\t\t\tautocomplete=\"current-password\"\n\t\t\t\t\trequired\n\t\t\t\t\terror={!!passwordError}\n\t\t\t\t\tdisabled={loading}\n\t\t\t\t\taria-label=\"パスワード\"\n\t\t\t\t\taria-describedby={passwordError ? 'password-error' : undefined}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclass=\"absolute right-3 top-1/2 -translate-y-1/2\"\n\t\t\t\t\tonclick={togglePasswordVisibility}\n\t\t\t\t\taria-label={showPassword ? 'パスワードを非表示' : 'パスワードを表示'}\n\t\t\t\t>\n\t\t\t\t\t<Icon name={showPassword ? 'eye-off' : 'eye'} />\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t{#if passwordError}\n\t\t\t\t<span id=\"password-error\" class=\"form-error\">{passwordError}</span>\n\t\t\t{/if}\n\t\t</div>\n\n\t\t<Button\n\t\t\ttype=\"submit\"\n\t\t\tvariant=\"primary\"\n\t\t\tsize=\"lg\"\n\t\t\tclass=\"w-full\"\n\t\t\t{loading}\n\t\t\taria-label=\"ログインする\"\n\t\t>\n\t\t\t{loading ? 'ログイン中...' : 'ログイン'}\n\t\t</Button>\n\t</form>\n</Card>"
					}
				},

				"features": {
					"loginSchema": {
						"path": "src/features/auth-login/model/loginSchema.ts",
						"code": "import { z } from 'zod';\n\n/**\n * ログインフォームのバリデーションスキーマ\n */\nexport const loginSchema = z.object({\n\temail: z\n\t\t.string()\n\t\t.min(1, 'メールアドレスは必須です')\n\t\t.email('有効なメールアドレスを入力してください'),\n\tpassword: z\n\t\t.string()\n\t\t.min(1, 'パスワードは必須です')\n\t\t.min(6, 'パスワードは6文字以上である必要があります')\n});\n\nexport type LoginFormData = z.infer<typeof loginSchema>;\n\n/**\n * ログイン結果\n */\nexport interface LoginResult {\n\tsuccess: boolean;\n\terror?: string;\n\tuser?: {\n\t\tid: string;\n\t\temail: string;\n\t};\n}\n\n/**\n * バリデーションエラー\n */\nexport interface ValidationErrors {\n\temail?: string;\n\tpassword?: string;\n}"
					},

					"supabaseAuth": {
						"path": "src/features/auth-login/api/supabaseAuth.ts",
						"code": "import { supabase } from '$shared/api/supabase';\nimport type { LoginFormData, LoginResult } from '../model/loginSchema';\nimport type { AuthError } from '@supabase/supabase-js';\n\n/**\n * Supabaseを使用したメール/パスワード認証\n */\nexport async function signInWithEmail(\n\tcredentials: LoginFormData\n): Promise<LoginResult> {\n\ttry {\n\t\tconst { data, error } = await supabase.auth.signInWithPassword({\n\t\t\temail: credentials.email,\n\t\t\tpassword: credentials.password\n\t\t});\n\n\t\tif (error) {\n\t\t\treturn handleAuthError(error);\n\t\t}\n\n\t\tif (!data.user) {\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\terror: '認証に失敗しました'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\tuser: {\n\t\t\t\tid: data.user.id,\n\t\t\t\temail: data.user.email || ''\n\t\t\t}\n\t\t};\n\t} catch (error) {\n\t\tconsole.error('Login error:', error);\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\terror: 'ログイン処理中にエラーが発生しました'\n\t\t};\n\t}\n}\n\n/**\n * 認証エラーのハンドリング\n */\nfunction handleAuthError(error: AuthError): LoginResult {\n\tconst errorMessages: Record<string, string> = {\n\t\t'Invalid login credentials': 'メールアドレスまたはパスワードが正しくありません',\n\t\t'Email not confirmed': 'メールアドレスの確認が完了していません',\n\t\t'User not found': 'ユーザーが見つかりません',\n\t\t'Too many requests': 'ログイン試行回数が多すぎます。しばらくしてから再度お試しください'\n\t};\n\n\tconst message = errorMessages[error.message] || \n\t\t`認証エラー: ${error.message}`;\n\n\treturn {\n\t\tsuccess: false,\n\t\terror: message\n\t};\n}\n\n/**\n * 現在のセッションを取得\n */\nexport async function getCurrentSession() {\n\tconst { data: { session } } = await supabase.auth.getSession();\n\treturn session;\n}\n\n/**\n * ログアウト\n */\nexport async function signOut() {\n\tconst { error } = await supabase.auth.signOut();\n\tif (error) {\n\t\tconsole.error('Logout error:', error);\n\t\tthrow new Error('ログアウトに失敗しました');\n\t}\n}"
					},

					"useLogin": {
						"path": "src/features/auth-login/composable/useLogin.svelte.ts",
						"code": "import { goto } from '$app/navigation';\nimport { signInWithEmail } from '../api/supabaseAuth';\nimport { loginSchema } from '../model/loginSchema';\nimport type { LoginFormData, LoginResult, ValidationErrors } from '../model/loginSchema';\n\n/**\n * ログイン機能のコンポーザブル\n */\nexport function useLogin() {\n\t// Svelte 5 Runesを使用したリアクティブな状態管理\n\tlet isLoading = $state(false);\n\tlet error = $state<string | null>(null);\n\tlet validationErrors = $state<ValidationErrors>({});\n\n\t/**\n\t * フォームのバリデーション\n\t */\n\tfunction validateForm(data: LoginFormData): boolean {\n\t\tvalidationErrors = {};\n\t\terror = null;\n\n\t\ttry {\n\t\t\tloginSchema.parse(data);\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\tif (e instanceof z.ZodError) {\n\t\t\t\tconst errors: ValidationErrors = {};\n\t\t\t\te.errors.forEach((err) => {\n\t\t\t\t\tconst field = err.path[0] as keyof ValidationErrors;\n\t\t\t\t\tif (!errors[field]) {\n\t\t\t\t\t\terrors[field] = err.message;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tvalidationErrors = errors;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * ログイン実行\n\t */\n\tasync function login(email: string, password: string): Promise<LoginResult> {\n\t\t// バリデーション\n\t\tconst formData: LoginFormData = { email, password };\n\t\tif (!validateForm(formData)) {\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\terror: 'フォームにエラーがあります'\n\t\t\t};\n\t\t}\n\n\t\tisLoading = true;\n\t\terror = null;\n\n\t\ttry {\n\t\t\tconst result = await signInWithEmail(formData);\n\n\t\t\tif (result.success) {\n\t\t\t\t// ログイン成功時はダッシュボードへリダイレクト\n\t\t\t\tawait goto('/dashboard');\n\t\t\t} else {\n\t\t\t\terror = result.error || '認証に失敗しました';\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconst errorMessage = e instanceof Error ? e.message : \n\t\t\t\t'予期しないエラーが発生しました';\n\t\t\terror = errorMessage;\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\terror: errorMessage\n\t\t\t};\n\t\t} finally {\n\t\t\tisLoading = false;\n\t\t}\n\t}\n\n\t/**\n\t * エラーをクリア\n\t */\n\tfunction clearError() {\n\t\terror = null;\n\t}\n\n\t/**\n\t * バリデーションエラーをクリア\n\t */\n\tfunction clearValidationErrors() {\n\t\tvalidationErrors = {};\n\t}\n\n\t// getterを使用してリアクティブな値へのアクセスを提供\n\treturn {\n\t\tget isLoading() {\n\t\t\treturn isLoading;\n\t\t},\n\t\tget error() {\n\t\t\treturn error;\n\t\t},\n\t\tget validationErrors() {\n\t\t\treturn validationErrors;\n\t\t},\n\t\tlogin,\n\t\tclearError,\n\t\tclearValidationErrors,\n\t\tvalidateForm\n\t};\n}\n\n// z のインポートを追加\nimport { z } from 'zod';"
					},

					"LoginForm": {
						"path": "src/features/auth-login/ui/LoginForm.svelte",
						"code": "<script lang=\"ts\">\n\timport UserCredentialsCard from '$entities/user/ui/UserCredentialsCard.svelte';\n\timport Alert from '$shared/components/ui/Alert.svelte';\n\timport { useLogin } from '../composable/useLogin.svelte';\n\timport { createForm } from '@melt-ui/svelte';\n\n\t// Melt UI フォームビルダーの初期化\n\tconst {\n\t\tform,\n\t\tdata,\n\t\terrors: meltErrors,\n\t\tenhance\n\t} = createForm({\n\t\tinitialValues: {\n\t\t\temail: '',\n\t\t\tpassword: ''\n\t\t}\n\t});\n\n\t// ログインコンポーザブルの使用\n\tconst loginHandler = useLogin();\n\n\t// リアクティブな状態\n\tlet email = $state('');\n\tlet password = $state('');\n\n\t// 派生状態\n\tconst showError = $derived(!!loginHandler.error);\n\tconst emailError = $derived(loginHandler.validationErrors.email);\n\tconst passwordError = $derived(loginHandler.validationErrors.password);\n\n\t/**\n\t * フォーム送信ハンドラー\n\t */\n\tasync function handleSubmit() {\n\t\tawait loginHandler.login(email, password);\n\t}\n\n\t/**\n\t * エラーアラートを閉じる\n\t */\n\tfunction handleDismissError() {\n\t\tloginHandler.clearError();\n\t}\n\n\t// フィールドのリアルタイムバリデーション\n\t$effect(() => {\n\t\tif (email && email.includes('@')) {\n\t\t\t// メールアドレスのフォーマットチェック\n\t\t\tif (!email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\n\t\t\t\tloginHandler.validationErrors.email = '有効なメールアドレスを入力してください';\n\t\t\t} else {\n\t\t\t\tif (loginHandler.validationErrors.email) {\n\t\t\t\t\tdelete loginHandler.validationErrors.email;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n</script>\n\n<div class=\"min-h-screen bg-gray-50 flex items-center justify-center px-4 py-12\">\n\t<div class=\"w-full max-w-md\">\n\t\t{#if showError}\n\t\t\t<div class=\"mb-4\">\n\t\t\t\t<Alert\n\t\t\t\t\ttype=\"error\"\n\t\t\t\t\tmessage={loginHandler.error}\n\t\t\t\t\tdismissible\n\t\t\t\t\tonDismiss={handleDismissError}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<UserCredentialsCard\n\t\t\tbind:email\n\t\t\tbind:password\n\t\t\t{emailError}\n\t\t\t{passwordError}\n\t\t\tonSubmit={handleSubmit}\n\t\t\tloading={loginHandler.isLoading}\n\t\t/>\n\t</div>\n</div>\n\n<style>\n\t/* レスポンシブデザインの追加スタイル */\n\t@media (max-width: 640px) {\n\t\t.min-h-screen {\n\t\t\tpadding: 1rem;\n\t\t}\n\t}\n</style>"
					}
				},

				"routes": {
					"loginPage": {
						"path": "src/routes/login/+page.svelte",
						"code": "<script lang=\"ts\">\n\timport LoginForm from '$features/auth-login/ui/LoginForm.svelte';\n\timport { onMount } from 'svelte';\n\timport { getCurrentSession } from '$features/auth-login/api/supabaseAuth';\n\timport { goto } from '$app/navigation';\n\n\t// 既にログインしている場合はダッシュボードへリダイレクト\n\tonMount(async () => {\n\t\tconst session = await getCurrentSession();\n\t\tif (session) {\n\t\t\tawait goto('/dashboard');\n\t\t}\n\t});\n</script>\n\n<svelte:head>\n\t<title>ログイン - 給与管理システム</title>\n\t<meta name=\"description\" content=\"給与管理システムにログインしてください\" />\n</svelte:head>\n\n<LoginForm />"
					}
				}
			}
		},

		"testImplementation": {
			"unitTests": [
				{
					"file": "src/shared/utils/validation.test.ts",
					"description": "バリデーション関数のユニットテスト",
					"code": "import { describe, it, expect } from 'vitest';\nimport { validateEmail, validatePassword, validateRequired } from './validation';\n\ndescribe('validateEmail', () => {\n\tit('有効なメールアドレスを検証する', () => {\n\t\texpect(validateEmail('test@example.com')).toBe(true);\n\t\texpect(validateEmail('user.name@domain.co.jp')).toBe(true);\n\t});\n\n\tit('無効なメールアドレスを検証する', () => {\n\t\texpect(validateEmail('invalid')).toBe(false);\n\t\texpect(validateEmail('@example.com')).toBe(false);\n\t\texpect(validateEmail('test@')).toBe(false);\n\t});\n});\n\ndescribe('validatePassword', () => {\n\tit('有効なパスワードを検証する', () => {\n\t\tconst result = validatePassword('password123');\n\t\texpect(result.valid).toBe(true);\n\t\texpect(result.errors).toHaveLength(0);\n\t});\n\n\tit('短すぎるパスワードを検証する', () => {\n\t\tconst result = validatePassword('12345');\n\t\texpect(result.valid).toBe(false);\n\t\texpect(result.errors).toContain('パスワードは6文字以上である必要があります');\n\t});\n});"
				},
				{
					"file": "src/features/auth-login/model/loginSchema.test.ts",
					"description": "Zodスキーマのバリデーションテスト",
					"code": "import { describe, it, expect } from 'vitest';\nimport { loginSchema } from './loginSchema';\n\ndescribe('loginSchema', () => {\n\tit('有効なデータを検証する', () => {\n\t\tconst data = {\n\t\t\temail: 'test@example.com',\n\t\t\tpassword: 'password123'\n\t\t};\n\t\texpect(() => loginSchema.parse(data)).not.toThrow();\n\t});\n\n\tit('無効なメールアドレスでエラーを返す', () => {\n\t\tconst data = {\n\t\t\temail: 'invalid',\n\t\t\tpassword: 'password123'\n\t\t};\n\t\texpect(() => loginSchema.parse(data)).toThrow();\n\t});\n\n\tit('短いパスワードでエラーを返す', () => {\n\t\tconst data = {\n\t\t\temail: 'test@example.com',\n\t\t\tpassword: '12345'\n\t\t};\n\t\texpect(() => loginSchema.parse(data)).toThrow();\n\t});\n});"
				}
			],

			"integrationTests": [
				{
					"file": "src/features/auth-login/api/supabaseAuth.test.ts",
					"description": "Supabase認証のインテグレーションテスト",
					"code": "import { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { signInWithEmail } from './supabaseAuth';\nimport { supabase } from '$shared/api/supabase';\n\nvi.mock('$shared/api/supabase', () => ({\n\tsupabase: {\n\t\tauth: {\n\t\t\tsignInWithPassword: vi.fn()\n\t\t}\n\t}\n}));\n\ndescribe('signInWithEmail', () => {\n\tbeforeEach(() => {\n\t\tvi.clearAllMocks();\n\t});\n\n\tit('成功時にユーザー情報を返す', async () => {\n\t\tconst mockUser = {\n\t\t\tid: 'user-123',\n\t\t\temail: 'test@example.com'\n\t\t};\n\n\t\tvi.mocked(supabase.auth.signInWithPassword).mockResolvedValue({\n\t\t\tdata: { user: mockUser, session: {} },\n\t\t\terror: null\n\t\t});\n\n\t\tconst result = await signInWithEmail({\n\t\t\temail: 'test@example.com',\n\t\t\tpassword: 'password123'\n\t\t});\n\n\t\texpect(result.success).toBe(true);\n\t\texpect(result.user).toEqual(mockUser);\n\t});\n\n\tit('エラー時に適切なメッセージを返す', async () => {\n\t\tvi.mocked(supabase.auth.signInWithPassword).mockResolvedValue({\n\t\t\tdata: { user: null, session: null },\n\t\t\terror: { message: 'Invalid login credentials' }\n\t\t});\n\n\t\tconst result = await signInWithEmail({\n\t\t\temail: 'test@example.com',\n\t\t\tpassword: 'wrong'\n\t\t});\n\n\t\texpect(result.success).toBe(false);\n\t\texpect(result.error).toBe('メールアドレスまたはパスワードが正しくありません');\n\t});\n});"
				}
			],

			"e2eTests": [
				{
					"file": "e2e/auth/login.spec.ts",
					"description": "ログインフローのE2Eテスト",
					"code": "import { test, expect } from '@playwright/test';\n\ntest.describe('ログイン機能', () => {\n\ttest.beforeEach(async ({ page }) => {\n\t\tawait page.goto('/login');\n\t});\n\n\ttest('AC-001: 有効な認証情報でログインできる', async ({ page }) => {\n\t\t// メールアドレス入力\n\t\tawait page.fill('input[name=\"email\"]', 'test@example.com');\n\t\t\n\t\t// パスワード入力\n\t\tawait page.fill('input[name=\"password\"]', 'password123');\n\t\t\n\t\t// ログインボタンクリック\n\t\tawait page.click('button[type=\"submit\"]');\n\t\t\n\t\t// ダッシュボードへのリダイレクトを確認\n\t\tawait expect(page).toHaveURL('/dashboard');\n\t});\n\n\ttest('AC-002: 無効なメールアドレスでエラーメッセージが表示される', async ({ page }) => {\n\t\t// 無効なメールアドレス入力\n\t\tawait page.fill('input[name=\"email\"]', 'invalid-email');\n\t\tawait page.press('input[name=\"email\"]', 'Tab');\n\t\t\n\t\t// エラーメッセージの表示を確認\n\t\tconst errorMessage = page.locator('#email-error');\n\t\tawait expect(errorMessage).toBeVisible();\n\t\tawait expect(errorMessage).toContainText('有効なメールアドレスを入力してください');\n\t});\n\n\ttest('AC-003: 間違った認証情報でエラーアラートが表示される', async ({ page }) => {\n\t\tawait page.fill('input[name=\"email\"]', 'test@example.com');\n\t\tawait page.fill('input[name=\"password\"]', 'wrongpassword');\n\t\tawait page.click('button[type=\"submit\"]');\n\t\t\n\t\t// エラーアラートの表示を確認\n\t\tconst alert = page.locator('[role=\"alert\"]');\n\t\tawait expect(alert).toBeVisible();\n\t\tawait expect(alert).toContainText('メールアドレスまたはパスワードが正しくありません');\n\t});\n\n\ttest('AC-004: ログインボタンがローディング状態になる', async ({ page }) => {\n\t\tawait page.fill('input[name=\"email\"]', 'test@example.com');\n\t\tawait page.fill('input[name=\"password\"]', 'password123');\n\t\t\n\t\t// ネットワークリクエストを遅延させる\n\t\tawait page.route('**/auth/v1/token**', route => {\n\t\t\tsetTimeout(() => route.continue(), 1000);\n\t\t});\n\t\t\n\t\tawait page.click('button[type=\"submit\"]');\n\t\t\n\t\t// ローディング状態を確認\n\t\tconst button = page.locator('button[type=\"submit\"]');\n\t\tawait expect(button).toBeDisabled();\n\t\tawait expect(button).toContainText('ログイン中...');\n\t\tawait expect(button.locator('.spinner')).toBeVisible();\n\t});\n\n\ttest('AC-005: モバイルビューでレスポンシブレイアウトが適用される', async ({ page }) => {\n\t\t// モバイルビューポートに設定\n\t\tawait page.setViewportSize({ width: 375, height: 667 });\n\t\t\n\t\t// カード全体が画面内に収まることを確認\n\t\tconst card = page.locator('.card');\n\t\tconst cardBox = await card.boundingBox();\n\t\t\n\t\texpect(cardBox?.width).toBeLessThanOrEqual(375);\n\t\texpect(cardBox?.height).toBeLessThanOrEqual(667);\n\t});\n\n\ttest('AC-006: パスワード表示切り替えが機能する', async ({ page }) => {\n\t\tconst passwordInput = page.locator('input[name=\"password\"]');\n\t\tconst toggleButton = page.locator('button[aria-label*=\"パスワード\"]');\n\t\t\n\t\t// 初期状態はパスワードが非表示\n\t\tawait expect(passwordInput).toHaveAttribute('type', 'password');\n\t\t\n\t\t// トグルボタンをクリック\n\t\tawait toggleButton.click();\n\t\t\n\t\t// パスワードが表示される\n\t\tawait expect(passwordInput).toHaveAttribute('type', 'text');\n\t\t\n\t\t// 再度クリックで非表示に\n\t\tawait toggleButton.click();\n\t\tawait expect(passwordInput).toHaveAttribute('type', 'password');\n\t});\n\n\ttest('AC-007: キーボードナビゲーションが正しく動作する', async ({ page }) => {\n\t\t// Tabキーでフォーカス移動\n\t\tawait page.keyboard.press('Tab');\n\t\tawait expect(page.locator('input[name=\"email\"]')).toBeFocused();\n\t\t\n\t\tawait page.keyboard.press('Tab');\n\t\tawait expect(page.locator('input[name=\"password\"]')).toBeFocused();\n\t\t\n\t\tawait page.keyboard.press('Tab');\n\t\tawait expect(page.locator('button[aria-label*=\"パスワード\"]')).toBeFocused();\n\t\t\n\t\tawait page.keyboard.press('Tab');\n\t\tawait expect(page.locator('button[type=\"submit\"]')).toBeFocused();\n\t});\n\n\ttest('AC-010: スクリーンリーダー用のARIA属性が正しく設定されている', async ({ page }) => {\n\t\t// フォームのARIA属性\n\t\tconst form = page.locator('form');\n\t\tawait expect(form).toHaveAttribute('role', 'form');\n\t\t\n\t\t// 入力フィールドのARIA属性\n\t\tconst emailInput = page.locator('input[name=\"email\"]');\n\t\tawait expect(emailInput).toHaveAttribute('aria-label', 'メールアドレス');\n\t\tawait expect(emailInput).toHaveAttribute('aria-required', 'true');\n\t\t\n\t\tconst passwordInput = page.locator('input[name=\"password\"]');\n\t\tawait expect(passwordInput).toHaveAttribute('aria-label', 'パスワード');\n\t\tawait expect(passwordInput).toHaveAttribute('aria-required', 'true');\n\t\t\n\t\t// ボタンのARIA属性\n\t\tconst submitButton = page.locator('button[type=\"submit\"]');\n\t\tawait expect(submitButton).toHaveAttribute('aria-label', 'ログインする');\n\t});\n});"
				}
			]
		},

		"setupInstructions": [
			"1. 環境変数の設定",
			"   - .env.localファイルを作成",
			"   - PUBLIC_SUPABASE_URL=your_supabase_url",
			"   - PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key",
			"",
			"2. 依存パッケージのインストール",
			"   ```bash",
			"   pnpm add @supabase/supabase-js zod @melt-ui/svelte",
			"   pnpm add -D @types/node vitest @playwright/test",
			"   ```",
			"",
			"3. Supabaseプロジェクトの設定",
			"   - Supabaseダッシュボードで認証を有効化",
			"   - Email/Passwordプロバイダーを有効化",
			"   - リダイレクトURLを設定（http://localhost:5173/dashboard）",
			"",
			"4. ビルドと起動",
			"   ```bash",
			"   pnpm install",
			"   pnpm dev",
			"   ```",
			"",
			"5. テストの実行",
			"   ```bash",
			"   pnpm test        # ユニットテスト",
			"   pnpm test:e2e    # E2Eテスト",
			"   ```"
		],

		"migrationCommands": [
			"# Supabase Authを使用するため、カスタムマイグレーションは不要",
			"# ユーザープロファイル拡張が必要な場合のみ:",
			"pnpm prisma migrate dev --name add_user_profiles"
		],

		"acceptanceCriteriaVerification": {
			"AC-001": {
				"implementation": "LoginForm.svelte + useLogin.svelte.ts + supabaseAuth.ts",
				"verification": "E2Eテスト: login.spec.ts - 有効な認証情報でのログインテスト"
			},
			"AC-002": {
				"implementation": "useLogin.svelte.tsでのリアルタイムバリデーション",
				"verification": "E2Eテスト: 無効なメールアドレスのエラー表示テスト"
			},
			"AC-003": {
				"implementation": "LoginForm.svelteのAlertコンポーネント",
				"verification": "E2Eテスト: 認証失敗時のエラーアラート表示テスト"
			},
			"AC-004": {
				"implementation": "Button.svelteのloadingプロップとspinner",
				"verification": "E2Eテスト: ローディング状態のテスト"
			},
			"AC-005": {
				"implementation": "app.cssのレスポンシブスタイル",
				"verification": "E2Eテスト: モバイルビューポートでのレイアウトテスト"
			},
			"AC-006": {
				"implementation": "UserCredentialsCard.svelteのパスワード表示切り替え",
				"verification": "E2Eテスト: パスワード表示/非表示切り替えテスト"
			},
			"AC-007": {
				"implementation": "適切なtabindex設定とフォーカス管理",
				"verification": "E2Eテスト: キーボードナビゲーションテスト"
			},
			"AC-008": {
				"implementation": "loginSchema.tsとuseLogin.svelte.tsのバリデーション",
				"verification": "ユニットテスト: loginSchema.test.ts"
			},
			"AC-009": {
				"implementation": "supabaseAuth.tsのエラーハンドリング",
				"verification": "インテグレーションテスト: supabaseAuth.test.ts"
			},
			"AC-010": {
				"implementation": "全コンポーネントへのARIA属性追加",
				"verification": "E2Eテスト: ARIA属性のテスト"
			}
		},

		"securityConsiderations": [
			"パスワードは常にtype='password'でマスク表示",
			"HTTPS通信の強制（Supabaseデフォルト）",
			"Supabaseのレート制限機能を活用",
			"XSS攻撃防止のための入力サニタイゼーション",
			"CSRF保護（SvelteKitのデフォルト機能）",
			"セッション管理はhttpOnlyクッキーを使用",
			"localStorage/sessionStorageには機密情報を保存しない"
		],

		"performanceMetrics": {
			"initialLoad": "< 2秒（3G接続）",
			"timeToInteractive": "< 3秒",
			"formSubmission": "< 1秒（通常接続）",
			"bundleSize": "< 50KB（gzip圧縮後）",
			"optimizations": [
				"コード分割による遅延読み込み",
				"Svelte 5のリアクティビティ最適化",
				"デバウンスによる過剰なバリデーション防止",
				"楽観的UIアップデート"
			]
		},

		"accessibilityFeatures": [
			"WCAG 2.1 Level AA準拠",
			"適切なARIAラベルとロール",
			"キーボードナビゲーション完全対応",
			"フォーカスインジケーターの明確な表示",
			"色コントラスト比4.5:1以上",
			"スクリーンリーダー対応",
			"エラーメッセージの自動アナウンス"
		]
	},

	"status": "detailed_design_complete",
	"version": "2.0.0",
	"created_at": "2025-09-02",
	"created_by": "Implementation-Agent"
}
