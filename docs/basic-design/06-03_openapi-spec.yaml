openapi: 3.0.3
info:
  title: 給料・資産管理システム API
  description: |
    個人の給料明細と株式ポートフォリオを一元管理するWebアプリケーションのREST API仕様書。
    
    ## 主要機能
    - 給料明細のCRUD操作とPDF解析
    - 株式ポートフォリオ管理と時価評価
    - 統合ダッシュボード
    - 予算管理
    - データエクスポート
    
    ## 認証
    - Bearer Token (JWT)
    - Google OAuth 2.0
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.salary-management.com/api/v1
    description: Production server
  - url: https://staging-api.salary-management.com/api/v1
    description: Staging server
  - url: http://localhost:5173/api/v1
    description: Development server

tags:
  - name: Authentication
    description: 認証・認可関連のエンドポイント
  - name: Users
    description: ユーザー管理
  - name: Salary Slips
    description: 給料明細管理
  - name: Portfolio
    description: 株式ポートフォリオ管理
  - name: Stocks
    description: 株価情報
  - name: Assets
    description: その他資産管理
  - name: Budgets
    description: 予算管理
  - name: Dashboard
    description: ダッシュボード
  - name: Export
    description: データエクスポート
  - name: System
    description: システム管理

security:
  - BearerAuth: []

paths:
  # Authentication endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: ユーザーログイン
      description: メールアドレス/パスワードまたはGoogle OAuthでログイン
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: ログアウト
      operationId: logout
      responses:
        '200':
          description: ログアウト成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: トークンリフレッシュ
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: トークン更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  # User endpoints
  /users/me:
    get:
      tags:
        - Users
      summary: 現在のユーザー情報取得
      operationId: getCurrentUser
      responses:
        '200':
          description: ユーザー情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    patch:
      tags:
        - Users
      summary: ユーザー情報更新
      operationId: updateCurrentUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags:
        - Users
      summary: アカウント削除
      operationId: deleteAccount
      responses:
        '204':
          description: 削除成功

  # Salary Slip endpoints
  /salary-slips:
    get:
      tags:
        - Salary Slips
      summary: 給料明細一覧取得
      operationId: getSalarySlips
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, confirmed, archived]
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
        - name: companyName
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 給料明細一覧
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SalarySlip'

    post:
      tags:
        - Salary Slips
      summary: 給料明細作成
      operationId: createSalarySlip
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSalarySlipRequest'
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalarySlipResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /salary-slips/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    
    get:
      tags:
        - Salary Slips
      summary: 給料明細詳細取得
      operationId: getSalarySlip
      responses:
        '200':
          description: 給料明細詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalarySlip'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Salary Slips
      summary: 給料明細更新
      operationId: updateSalarySlip
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSalarySlipRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalarySlip'

    delete:
      tags:
        - Salary Slips
      summary: 給料明細削除
      operationId: deleteSalarySlip
      responses:
        '204':
          description: 削除成功
        '404':
          $ref: '#/components/responses/NotFoundError'

  /salary-slips/upload:
    post:
      tags:
        - Salary Slips
      summary: PDF一括アップロード
      operationId: uploadSalarySlipPdf
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 10
                autoConfirm:
                  type: boolean
                  default: false
                overwriteExisting:
                  type: boolean
                  default: false
      responses:
        '200':
          description: アップロード処理結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResult'

  /salary-slips/{id}/pdf:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    get:
      tags:
        - Salary Slips
      summary: PDF再生成・ダウンロード
      operationId: downloadSalarySlipPdf
      responses:
        '200':
          description: PDFファイル
          content:
            application/pdf:
              schema:
                type: string
                format: binary

  /salary-slips/statistics:
    get:
      tags:
        - Salary Slips
      summary: 給料統計取得
      operationId: getSalaryStatistics
      parameters:
        - name: year
          in: query
          schema:
            type: integer
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: 統計情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalaryStatistics'

  # Portfolio endpoints
  /portfolio:
    get:
      tags:
        - Portfolio
      summary: ポートフォリオサマリー取得
      operationId: getPortfolioSummary
      responses:
        '200':
          description: ポートフォリオサマリー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioSummary'

  /portfolio/stocks:
    get:
      tags:
        - Portfolio
      summary: 保有株式一覧取得
      operationId: getPortfolioStocks
      parameters:
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [symbol, value, gainLoss, percentage]
        - $ref: '#/components/parameters/SortOrderParam'
      responses:
        '200':
          description: 保有株式一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockPortfolio'

  /portfolio/stocks/{id}:
    parameters:
      - $ref: '#/components/parameters/IdParam'
    get:
      tags:
        - Portfolio
      summary: 保有株式詳細取得
      operationId: getPortfolioStock
      responses:
        '200':
          description: 保有株式詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockPortfolioDetail'

  /portfolio/transactions:
    get:
      tags:
        - Portfolio
      summary: 取引履歴取得
      operationId: getTransactions
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: symbol
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum: [buy, sell, dividend]
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: 取引履歴
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/StockTransaction'

    post:
      tags:
        - Portfolio
      summary: 株式取引記録
      operationId: createTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '201':
          description: 記録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'

  # Stock Price endpoints
  /stocks/search:
    get:
      tags:
        - Stocks
      summary: 銘柄検索
      operationId: searchStocks
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: exchange
          in: query
          schema:
            type: string
            enum: [TSE, NYSE, NASDAQ, LSE, HKEX, SSE, SZSE]
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: 検索結果
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockSearchResult'

  /stocks/{symbol}/price:
    parameters:
      - name: symbol
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Stocks
      summary: 現在株価取得
      operationId: getStockPrice
      responses:
        '200':
          description: 現在株価
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockPrice'

  /stocks/{symbol}/history:
    parameters:
      - name: symbol
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Stocks
      summary: 株価履歴取得
      operationId: getStockHistory
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [1d, 1w, 1m, 3m, 6m, 1y, 5y]
        - name: from
          in: query
          schema:
            type: string
            format: date
        - name: to
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: 株価履歴
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockPriceHistory'

  /stocks/prices/update:
    post:
      tags:
        - Stocks
      summary: 株価一括更新
      operationId: updateStockPrices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePricesRequest'
      responses:
        '200':
          description: 更新結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePricesResult'

  # Dashboard endpoints
  /dashboard:
    get:
      tags:
        - Dashboard
      summary: ダッシュボードデータ取得
      operationId: getDashboard
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [1m, 3m, 6m, 1y, all]
        - name: widgets
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: ダッシュボードデータ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardData'

  /dashboard/preferences:
    get:
      tags:
        - Dashboard
      summary: ダッシュボード設定取得
      operationId: getDashboardPreferences
      responses:
        '200':
          description: ダッシュボード設定
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardPreferences'

    put:
      tags:
        - Dashboard
      summary: ダッシュボード設定更新
      operationId: updateDashboardPreferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDashboardPreferencesRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardPreferences'

  # System endpoints
  /health:
    get:
      tags:
        - System
      summary: ヘルスチェック
      operationId: healthCheck
      security: []
      responses:
        '200':
          description: システム正常
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    IdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{25}$'
      description: リソースID (CUID形式)

    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: ページ番号

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: 1ページあたりの件数

    SortByParam:
      name: sortBy
      in: query
      schema:
        type: string
      description: ソートフィールド

    SortOrderParam:
      name: sortOrder
      in: query
      schema:
        type: string
        enum: [asc, desc]
        default: desc
      description: ソート順

  schemas:
    # Common schemas
    EntityId:
      type: string
      pattern: '^[a-zA-Z0-9]{25}$'
      description: CUID形式のID

    ISODateString:
      type: string
      format: date-time
      description: ISO 8601形式の日時

    MoneyAmount:
      type: string
      pattern: '^\d+(\.\d{1,2})?$'
      description: 金額（文字列で精度保持）

    Percentage:
      type: number
      minimum: -100
      maximum: 10000
      description: パーセンテージ

    CurrencyCode:
      type: string
      enum: [JPY, USD, EUR, GBP, CNY]
      default: JPY

    Timestamps:
      type: object
      properties:
        createdAt:
          $ref: '#/components/schemas/ISODateString'
        updatedAt:
          $ref: '#/components/schemas/ISODateString'

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    PaginatedResponse:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: array
          items: {}
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    Error:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          const: false
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
            requestId:
              type: string
            timestamp:
              $ref: '#/components/schemas/ISODateString'

    SuccessMessage:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: object
          properties:
            message:
              type: string

    # Authentication schemas
    LoginRequest:
      oneOf:
        - type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              format: email
            password:
              type: string
              minLength: 8
        - type: object
          required:
            - googleToken
          properties:
            googleToken:
              type: string

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            session:
              type: object
              properties:
                token:
                  type: string
                refreshToken:
                  type: string
                expiresAt:
                  $ref: '#/components/schemas/ISODateString'

    TokenResponse:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: object
          properties:
            token:
              type: string
            refreshToken:
              type: string
            expiresAt:
              $ref: '#/components/schemas/ISODateString'

    # User schemas
    User:
      allOf:
        - $ref: '#/components/schemas/Timestamps'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/EntityId'
            email:
              type: string
              format: email
            name:
              type: string
            avatarUrl:
              type: string
              format: uri
              nullable: true
            isActive:
              type: boolean
            preferences:
              $ref: '#/components/schemas/UserPreferences'

    UserPreferences:
      type: object
      properties:
        defaultCurrency:
          $ref: '#/components/schemas/CurrencyCode'
        fiscalYearStart:
          type: integer
          minimum: 1
          maximum: 12
        salaryDayOfMonth:
          type: integer
          minimum: 1
          maximum: 31
        notificationEmail:
          type: boolean
        notificationPush:
          type: boolean
        privacyMode:
          type: boolean
        dataRetentionYears:
          type: integer
          minimum: 1
          maximum: 10

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        avatarUrl:
          type: string
          format: uri
        preferences:
          $ref: '#/components/schemas/UserPreferences'

    # Salary Slip schemas
    SalarySlip:
      allOf:
        - $ref: '#/components/schemas/Timestamps'
        - type: object
          required:
            - id
            - userId
            - companyName
            - employeeName
            - employeeId
            - paymentDate
            - targetPeriodStart
            - targetPeriodEnd
            - attendance
            - earnings
            - deductions
            - baseSalary
            - totalEarnings
            - totalDeductions
            - netPay
            - currency
            - status
            - sourceType
          properties:
            id:
              $ref: '#/components/schemas/EntityId'
            userId:
              $ref: '#/components/schemas/EntityId'
            companyName:
              type: string
            employeeName:
              type: string
            employeeId:
              type: string
            paymentDate:
              $ref: '#/components/schemas/ISODateString'
            targetPeriodStart:
              $ref: '#/components/schemas/ISODateString'
            targetPeriodEnd:
              $ref: '#/components/schemas/ISODateString'
            attendance:
              $ref: '#/components/schemas/AttendanceInfo'
            earnings:
              $ref: '#/components/schemas/EarningsDetail'
            deductions:
              $ref: '#/components/schemas/DeductionsDetail'
            baseSalary:
              $ref: '#/components/schemas/MoneyAmount'
            totalEarnings:
              $ref: '#/components/schemas/MoneyAmount'
            totalDeductions:
              $ref: '#/components/schemas/MoneyAmount'
            netPay:
              $ref: '#/components/schemas/MoneyAmount'
            currency:
              $ref: '#/components/schemas/CurrencyCode'
            status:
              type: string
              enum: [draft, confirmed, archived]
            sourceType:
              type: string
              enum: [pdf, manual, api]

    AttendanceInfo:
      type: object
      properties:
        overtimeHours:
          type: number
          minimum: 0
        overtimeHoursOver60:
          type: number
          minimum: 0
        lateNightHours:
          type: number
          minimum: 0
        holidayWorkDays:
          type: integer
          minimum: 0
        paidLeaveDays:
          type: number
          minimum: 0
        absenceDays:
          type: number
          minimum: 0
        workingDays:
          type: integer
          minimum: 0
        scheduledWorkDays:
          type: integer
          minimum: 0

    EarningsDetail:
      type: object
      required:
        - baseSalary
      properties:
        baseSalary:
          $ref: '#/components/schemas/MoneyAmount'
        overtimePay:
          $ref: '#/components/schemas/MoneyAmount'
        overtimePayOver60:
          $ref: '#/components/schemas/MoneyAmount'
        lateNightPay:
          $ref: '#/components/schemas/MoneyAmount'
        holidayWorkPay:
          $ref: '#/components/schemas/MoneyAmount'
        fixedOvertimeAllowance:
          $ref: '#/components/schemas/MoneyAmount'
        transportationAllowance:
          $ref: '#/components/schemas/MoneyAmount'
        housingAllowance:
          $ref: '#/components/schemas/MoneyAmount'
        familyAllowance:
          $ref: '#/components/schemas/MoneyAmount'
        qualificationAllowance:
          $ref: '#/components/schemas/MoneyAmount'
        expenseReimbursement:
          $ref: '#/components/schemas/MoneyAmount'
        stockPurchaseIncentive:
          $ref: '#/components/schemas/MoneyAmount'
        bonus:
          $ref: '#/components/schemas/MoneyAmount'
        otherEarnings:
          $ref: '#/components/schemas/MoneyAmount'
      additionalProperties:
        $ref: '#/components/schemas/MoneyAmount'

    DeductionsDetail:
      type: object
      properties:
        healthInsurance:
          $ref: '#/components/schemas/MoneyAmount'
        welfareInsurance:
          $ref: '#/components/schemas/MoneyAmount'
        employmentInsurance:
          $ref: '#/components/schemas/MoneyAmount'
        incomeTax:
          $ref: '#/components/schemas/MoneyAmount'
        residentTax:
          $ref: '#/components/schemas/MoneyAmount'
        stockPurchase:
          $ref: '#/components/schemas/MoneyAmount'
        loan:
          $ref: '#/components/schemas/MoneyAmount'
        unionFee:
          $ref: '#/components/schemas/MoneyAmount'
        otherDeductions:
          $ref: '#/components/schemas/MoneyAmount'
      additionalProperties:
        $ref: '#/components/schemas/MoneyAmount'

    CreateSalarySlipRequest:
      type: object
      required:
        - companyName
        - employeeName
        - employeeId
        - paymentDate
        - targetPeriodStart
        - targetPeriodEnd
        - attendance
        - earnings
        - deductions
      properties:
        companyName:
          type: string
          minLength: 1
          maxLength: 100
        employeeName:
          type: string
          minLength: 1
          maxLength: 100
        employeeId:
          type: string
          minLength: 1
          maxLength: 50
        paymentDate:
          $ref: '#/components/schemas/ISODateString'
        targetPeriodStart:
          $ref: '#/components/schemas/ISODateString'
        targetPeriodEnd:
          $ref: '#/components/schemas/ISODateString'
        attendance:
          $ref: '#/components/schemas/AttendanceInfo'
        earnings:
          $ref: '#/components/schemas/EarningsDetail'
        deductions:
          $ref: '#/components/schemas/DeductionsDetail'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        status:
          type: string
          enum: [draft, confirmed]
          default: draft

    UpdateSalarySlipRequest:
      $ref: '#/components/schemas/CreateSalarySlipRequest'

    SalarySlipResponse:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          $ref: '#/components/schemas/SalarySlip'

    UploadResult:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: object
          properties:
            processed:
              type: integer
            succeeded:
              type: integer
            failed:
              type: integer
            duplicates:
              type: integer
            results:
              type: array
              items:
                type: object
                properties:
                  fileName:
                    type: string
                  status:
                    type: string
                    enum: [success, failed, duplicate]
                  salarySlipId:
                    $ref: '#/components/schemas/EntityId'
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      message:
                        type: string

    SalaryStatistics:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: object
          properties:
            averageMonthlyIncome:
              $ref: '#/components/schemas/MoneyAmount'
            totalAnnualIncome:
              $ref: '#/components/schemas/MoneyAmount'
            averageOvertimeHours:
              type: number
            taxRate:
              $ref: '#/components/schemas/Percentage'
            savingsRate:
              $ref: '#/components/schemas/Percentage'
            incomeGrowthRate:
              $ref: '#/components/schemas/Percentage'
            monthlyBreakdown:
              type: array
              items:
                type: object
                properties:
                  month:
                    type: string
                  income:
                    $ref: '#/components/schemas/MoneyAmount'
                  deductions:
                    $ref: '#/components/schemas/MoneyAmount'
                  netPay:
                    $ref: '#/components/schemas/MoneyAmount'

    # Portfolio schemas
    StockPortfolio:
      allOf:
        - $ref: '#/components/schemas/Timestamps'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/EntityId'
            userId:
              $ref: '#/components/schemas/EntityId'
            stockId:
              $ref: '#/components/schemas/EntityId'
            stock:
              $ref: '#/components/schemas/StockMaster'
            quantity:
              type: string
            averagePurchasePrice:
              $ref: '#/components/schemas/MoneyAmount'
            totalInvestment:
              $ref: '#/components/schemas/MoneyAmount'
            currentValue:
              $ref: '#/components/schemas/MoneyAmount'
            unrealizedGainLoss:
              $ref: '#/components/schemas/MoneyAmount'
            unrealizedGainLossRate:
              $ref: '#/components/schemas/Percentage'

    StockPortfolioDetail:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: object
          properties:
            portfolio:
              $ref: '#/components/schemas/StockPortfolio'
            currentPrice:
              $ref: '#/components/schemas/StockPrice'
            priceHistory:
              type: array
              items:
                $ref: '#/components/schemas/StockPriceHistory'
            transactions:
              type: array
              items:
                $ref: '#/components/schemas/StockTransaction'

    PortfolioSummary:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: object
          properties:
            totalInvestment:
              $ref: '#/components/schemas/MoneyAmount'
            totalCurrentValue:
              $ref: '#/components/schemas/MoneyAmount'
            totalUnrealizedGainLoss:
              $ref: '#/components/schemas/MoneyAmount'
            totalUnrealizedGainLossRate:
              $ref: '#/components/schemas/Percentage'
            totalDividendReceived:
              $ref: '#/components/schemas/MoneyAmount'
            composition:
              type: array
              items:
                type: object
                properties:
                  stockId:
                    $ref: '#/components/schemas/EntityId'
                  symbol:
                    type: string
                  name:
                    type: string
                  value:
                    $ref: '#/components/schemas/MoneyAmount'
                  percentage:
                    $ref: '#/components/schemas/Percentage'

    StockMaster:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        symbol:
          type: string
        name:
          type: string
        exchange:
          type: string
          enum: [TSE, NYSE, NASDAQ, LSE, HKEX, SSE, SZSE]
        sector:
          type: string
        industry:
          type: string
        currency:
          $ref: '#/components/schemas/CurrencyCode'

    StockTransaction:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        portfolioId:
          $ref: '#/components/schemas/EntityId'
        stockId:
          $ref: '#/components/schemas/EntityId'
        transactionType:
          type: string
          enum: [buy, sell, dividend]
        quantity:
          type: string
        pricePerShare:
          $ref: '#/components/schemas/MoneyAmount'
        totalAmount:
          $ref: '#/components/schemas/MoneyAmount'
        commission:
          $ref: '#/components/schemas/MoneyAmount'
        tax:
          $ref: '#/components/schemas/MoneyAmount'
        transactionDate:
          $ref: '#/components/schemas/ISODateString'
        notes:
          type: string
          nullable: true
        createdAt:
          $ref: '#/components/schemas/ISODateString'

    CreateTransactionRequest:
      type: object
      required:
        - symbol
        - transactionType
        - quantity
        - pricePerShare
        - transactionDate
      properties:
        symbol:
          type: string
          minLength: 1
          maxLength: 10
        transactionType:
          type: string
          enum: [buy, sell, dividend]
        quantity:
          type: string
          pattern: '^\d+(\.\d{1,4})?$'
        pricePerShare:
          type: string
          pattern: '^\d+(\.\d{1,2})?$'
        commission:
          type: string
          pattern: '^\d+(\.\d{1,2})?$'
        tax:
          type: string
          pattern: '^\d+(\.\d{1,2})?$'
        transactionDate:
          $ref: '#/components/schemas/ISODateString'
        notes:
          type: string
          maxLength: 500

    TransactionResponse:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: object
          properties:
            transaction:
              $ref: '#/components/schemas/StockTransaction'
            portfolio:
              $ref: '#/components/schemas/StockPortfolio'

    StockSearchResult:
      type: object
      properties:
        symbol:
          type: string
        name:
          type: string
        exchange:
          type: string
        sector:
          type: string
        currentPrice:
          $ref: '#/components/schemas/MoneyAmount'

    StockPrice:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: object
          properties:
            stockId:
              $ref: '#/components/schemas/EntityId'
            symbol:
              type: string
            currentPrice:
              $ref: '#/components/schemas/MoneyAmount'
            previousClose:
              $ref: '#/components/schemas/MoneyAmount'
            dayChange:
              $ref: '#/components/schemas/MoneyAmount'
            dayChangePercent:
              $ref: '#/components/schemas/Percentage'
            dayHigh:
              $ref: '#/components/schemas/MoneyAmount'
            dayLow:
              $ref: '#/components/schemas/MoneyAmount'
            volume:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/ISODateString'

    StockPriceHistory:
      type: object
      properties:
        date:
          type: string
          format: date
        open:
          $ref: '#/components/schemas/MoneyAmount'
        high:
          $ref: '#/components/schemas/MoneyAmount'
        low:
          $ref: '#/components/schemas/MoneyAmount'
        close:
          $ref: '#/components/schemas/MoneyAmount'
        adjustedClose:
          $ref: '#/components/schemas/MoneyAmount'
        volume:
          type: string

    UpdatePricesRequest:
      type: object
      properties:
        symbols:
          type: array
          items:
            type: string
        force:
          type: boolean
          default: false

    UpdatePricesResult:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: object
          properties:
            updated:
              type: integer
            cached:
              type: integer
            failed:
              type: integer
            results:
              type: array
              items:
                type: object
                properties:
                  symbol:
                    type: string
                  status:
                    type: string
                    enum: [updated, cached, failed]
                  price:
                    type: object
                  error:
                    type: object

    # Dashboard schemas
    DashboardData:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          type: object
          properties:
            summary:
              type: object
              properties:
                totalAssets:
                  $ref: '#/components/schemas/MoneyAmount'
                monthlyIncome:
                  $ref: '#/components/schemas/MoneyAmount'
                monthlyExpense:
                  $ref: '#/components/schemas/MoneyAmount'
                savingsRate:
                  $ref: '#/components/schemas/Percentage'
                portfolioValue:
                  $ref: '#/components/schemas/MoneyAmount'
                portfolioGainLoss:
                  $ref: '#/components/schemas/MoneyAmount'
            charts:
              type: object
            recentActivities:
              type: array
              items:
                type: object
            alerts:
              type: array
              items:
                type: object

    DashboardPreferences:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        userId:
          $ref: '#/components/schemas/EntityId'
        layout:
          type: object
        widgets:
          type: array
          items:
            type: object
        theme:
          type: string
          enum: [light, dark, auto]
        locale:
          type: string
          enum: [ja, en]

    UpdateDashboardPreferencesRequest:
      type: object
      properties:
        layout:
          type: object
        widgets:
          type: array
          items:
            type: object
        theme:
          type: string
          enum: [light, dark, auto]
        locale:
          type: string
          enum: [ja, en]

    # System schemas
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        uptime:
          type: integer
        timestamp:
          $ref: '#/components/schemas/ISODateString'
        services:
          type: object
          properties:
            database:
              type: string
              enum: [up, down]
            cache:
              type: string
              enum: [up, down]
            stockApi:
              type: string
              enum: [up, down]

  responses:
    UnauthorizedError:
      description: 認証エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: AUTHENTICATION_ERROR
              message: 認証が必要です

    ForbiddenError:
      description: 認可エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: AUTHORIZATION_ERROR
              message: このリソースへのアクセス権限がありません

    NotFoundError:
      description: リソース不存在
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: NOT_FOUND
              message: 指定されたリソースが見つかりません

    ValidationError:
      description: バリデーションエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: VALIDATION_ERROR
              message: 入力データが無効です
              details:
                validation:
                  - field: email
                    message: 有効なメールアドレスを入力してください

    RateLimitError:
      description: レート制限エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: RATE_LIMIT_EXCEEDED
              message: APIリクエスト数が制限を超えました
              details:
                retryAfter: 900

    InternalServerError:
      description: サーバー内部エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: INTERNAL_SERVER_ERROR
              message: サーバー内部エラーが発生しました