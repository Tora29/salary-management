{
	"detailedDesignSummary": "パスワードリセット機能の詳細設計。FSDアーキテクチャに準拠し、既存のログイン実装パターンを踏襲。セキュアで使いやすいパスワードリセットフローを実現。",
	"components": {
		"routes": [
			{
				"path": "/forgot-password/+page.svelte",
				"type": "page",
				"description": "パスワードリセット申請画面",
				"imports": [
					"Alert from $shared/components/ui/Alert.svelte",
					"ForgotPasswordForm from $features/auth/forgot-password/ui/ForgotPasswordForm.svelte"
				],
				"state": {
					"showResetRequested": "boolean - リセットメール送信成功表示フラグ"
				},
				"lifecycle": {
					"onMount": "ログイン済みチェック、URLパラメータ処理"
				}
			},
			{
				"path": "/reset-password/+page.svelte",
				"type": "page",
				"description": "新パスワード設定画面",
				"imports": [
					"Alert from $shared/components/ui/Alert.svelte",
					"ResetPasswordForm from $features/auth/reset-password/ui/ResetPasswordForm.svelte"
				],
				"state": {
					"tokenValid": "boolean - トークン有効性",
					"tokenError": "string | null - トークンエラーメッセージ",
					"isVerifying": "boolean - トークン検証中フラグ"
				},
				"lifecycle": {
					"onMount": "トークン検証処理"
				}
			}
		],
		"features": [
			{
				"path": "/auth/forgot-password/ui/ForgotPasswordForm.svelte",
				"type": "ui",
				"description": "パスワードリセット申請フォーム",
				"imports": [
					"ForgotPasswordCard from $entities/auth/ui/ForgotPasswordCard.svelte",
					"useForgotPassword from ../composable/useForgotPassword.svelte"
				],
				"state": {
					"email": "$state<string> - メールアドレス入力値"
				},
				"derivedState": {
					"showError": "!!forgotPasswordHandler.error",
					"showSuccess": "forgotPasswordHandler.isSuccess",
					"emailError": "forgotPasswordHandler.validationErrors.email"
				},
				"eventHandlers": {
					"handleSubmit": "フォーム送信処理",
					"handleDismissError": "エラーメッセージ消去",
					"handleDismissSuccess": "成功メッセージ消去"
				}
			},
			{
				"path": "/auth/forgot-password/composable/useForgotPassword.svelte.ts",
				"type": "composable",
				"description": "パスワードリセット申請ロジック",
				"exports": "useForgotPassword",
				"state": {
					"isLoading": "$state<boolean> - ローディング状態",
					"isSuccess": "$state<boolean> - 成功状態",
					"error": "$state<string | null> - エラーメッセージ",
					"validationErrors": "$state<ValidationErrors> - バリデーションエラー"
				},
				"methods": {
					"sendResetEmail": "リセットメール送信処理",
					"validateForm": "フォームバリデーション",
					"clearError": "エラークリア",
					"clearSuccess": "成功状態クリア"
				},
				"security": {
					"emailExistenceHiding": "メール存在確認による情報漏洩防止"
				}
			},
			{
				"path": "/auth/forgot-password/model/forgotPasswordSchema.ts",
				"type": "model",
				"description": "パスワードリセット申請の型定義とバリデーションスキーマ",
				"exports": [
					"forgotPasswordSchema - Zodバリデーションスキーマ",
					"ForgotPasswordFormData - フォームデータ型",
					"ValidationErrors - バリデーションエラー型",
					"ForgotPasswordResult - API応答型"
				],
				"validation": {
					"email": {
						"required": true,
						"format": "email",
						"minLength": 1,
						"maxLength": 255
					}
				}
			},
			{
				"path": "/auth/forgot-password/api/forgotPassword.ts",
				"type": "api",
				"description": "パスワードリセット申請API",
				"exports": "requestPasswordReset",
				"supabaseMethod": "auth.resetPasswordForEmail",
				"errorHandling": {
					"rateLimit": "明示的にエラーを返す",
					"other": "成功として扱う（セキュリティ）"
				}
			},
			{
				"path": "/auth/reset-password/ui/ResetPasswordForm.svelte",
				"type": "ui",
				"description": "新パスワード設定フォーム",
				"imports": [
					"ResetPasswordCard from $entities/auth/ui/ResetPasswordCard.svelte",
					"useResetPassword from ../composable/useResetPassword.svelte"
				],
				"state": {
					"password": "$state<string> - パスワード入力値",
					"confirmPassword": "$state<string> - パスワード確認入力値"
				},
				"derivedState": {
					"showError": "!!resetPasswordHandler.error",
					"passwordError": "resetPasswordHandler.validationErrors.password",
					"confirmPasswordError": "resetPasswordHandler.validationErrors.confirmPassword"
				},
				"effects": {
					"passwordStrengthUpdate": "パスワード入力時に強度を計算"
				}
			},
			{
				"path": "/auth/reset-password/composable/useResetPassword.svelte.ts",
				"type": "composable",
				"description": "パスワードリセット実行ロジック",
				"exports": "useResetPassword",
				"state": {
					"isLoading": "$state<boolean> - ローディング状態",
					"error": "$state<string | null> - エラーメッセージ",
					"validationErrors": "$state<ValidationErrors> - バリデーションエラー",
					"passwordStrength": "$state<PasswordStrength> - パスワード強度"
				},
				"methods": {
					"resetPassword": "パスワードリセット実行",
					"validateForm": "フォームバリデーション",
					"calculatePasswordStrength": "パスワード強度計算",
					"updatePasswordStrength": "パスワード強度更新",
					"clearError": "エラークリア"
				},
				"features": {
					"passwordStrengthCalculation": "文字種、長さに基づく7段階評価",
					"redirectAfterReset": "/login?reset=true へリダイレクト"
				}
			},
			{
				"path": "/auth/reset-password/model/resetPasswordSchema.ts",
				"type": "model",
				"description": "パスワードリセットの型定義とバリデーションスキーマ",
				"exports": [
					"resetPasswordSchema - Zodバリデーションスキーマ",
					"ResetPasswordFormData - フォームデータ型",
					"ValidationErrors - バリデーションエラー型",
					"ResetPasswordResult - API応答型"
				],
				"validation": {
					"password": {
						"required": true,
						"minLength": 8,
						"maxLength": 128,
						"pattern": "大文字、小文字、数字必須"
					},
					"confirmPassword": {
						"required": true,
						"mustMatch": "password"
					}
				}
			},
			{
				"path": "/auth/reset-password/api/resetPassword.ts",
				"type": "api",
				"description": "パスワード更新API",
				"exports": ["verifyResetToken - トークン検証", "updatePassword - パスワード更新"],
				"supabaseMethods": {
					"verifyResetToken": "auth.getSession",
					"updatePassword": "auth.updateUser"
				},
				"postUpdate": "自動ログアウト処理"
			}
		],
		"entities": [
			{
				"path": "/auth/ui/ForgotPasswordCard.svelte",
				"type": "ui",
				"description": "パスワードリセット申請カードコンポーネント",
				"imports": [
					"Button from $shared/components/ui/Button.svelte",
					"Card from $shared/components/ui/Card.svelte",
					"Input from $shared/components/ui/Input.svelte",
					"Label from $shared/components/ui/Label.svelte",
					"Link from $shared/components/ui/Link.svelte"
				],
				"props": {
					"email": "string (bindable)",
					"emailError": "string | undefined",
					"onSubmit": "() => void",
					"loading": "boolean = false"
				},
				"features": {
					"formLayout": "カード型レイアウト",
					"validation": "リアルタイムエラー表示",
					"accessibility": "aria-label, aria-describedby設定"
				}
			},
			{
				"path": "/auth/ui/ResetPasswordCard.svelte",
				"type": "ui",
				"description": "新パスワード設定カードコンポーネント",
				"imports": [
					"Eye, EyeOff from @lucide/svelte",
					"Button from $shared/components/ui/Button.svelte",
					"Card from $shared/components/ui/Card.svelte",
					"Input from $shared/components/ui/Input.svelte",
					"Label from $shared/components/ui/Label.svelte",
					"PasswordStrength from $shared/components/ui/PasswordStrength.svelte"
				],
				"props": {
					"password": "string (bindable)",
					"confirmPassword": "string (bindable)",
					"passwordError": "string | undefined",
					"confirmPasswordError": "string | undefined",
					"passwordStrength": "PasswordStrength | undefined",
					"onPasswordChange": "(password: string) => void",
					"onSubmit": "() => void",
					"loading": "boolean = false"
				},
				"features": {
					"passwordVisibilityToggle": "パスワード表示/非表示切替",
					"passwordStrengthIndicator": "パスワード強度表示",
					"dualPasswordFields": "確認用パスワード入力"
				}
			},
			{
				"path": "/auth/model/password-reset.ts",
				"type": "model",
				"description": "パスワードリセット関連の型定義",
				"exports": [
					"ForgotPasswordCardProps - ForgotPasswordCardのProps型",
					"ResetPasswordCardProps - ResetPasswordCardのProps型"
				]
			}
		],
		"shared": [
			{
				"path": "/components/ui/PasswordStrength.svelte",
				"type": "ui",
				"description": "パスワード強度インジケーターコンポーネント",
				"props": {
					"strength": {
						"score": "number - 強度スコア（0-7）",
						"message": "string - 強度メッセージ",
						"color": "string - 表示色（red/yellow/green/gray）"
					}
				},
				"features": {
					"progressBar": "視覚的な強度表示バー",
					"colorCoding": "強度に応じた色分け",
					"animation": "transition-all duration-300"
				}
			}
		],
		"constants": [
			{
				"path": "/shared/consts/validationRules.ts",
				"additions": {
					"LENGTH_LIMITS": {
						"EMAIL_MIN": 1,
						"EMAIL_MAX": 255,
						"PASSWORD_MIN": 8,
						"PASSWORD_MAX": 128
					}
				}
			},
			{
				"path": "/shared/consts/successMessages.ts",
				"additions": {
					"PASSWORD_RESET_EMAIL_SENT": "パスワードリセットメールを送信しました。メールをご確認ください。",
					"PASSWORD_RESET_COMPLETE": "パスワードがリセットされました。新しいパスワードでログインしてください。"
				}
			},
			{
				"path": "/shared/consts/routes.ts",
				"existing": {
					"FORGOT_PASSWORD": "/forgot-password",
					"RESET_PASSWORD": "/reset-password",
					"LOGIN_RESET": "/login?reset=true"
				}
			}
		]
	},
	"security": {
		"rateLimit": {
			"implementation": "Supabase Auth組み込みレート制限",
			"limit": "1時間あたり3回",
			"errorHandling": "明確なエラーメッセージ表示"
		},
		"tokenManagement": {
			"generation": "Supabase Auth自動生成",
			"validity": "1時間（Supabaseデフォルト）",
			"type": "ワンタイムトークン",
			"storage": "URLパラメータとして送信"
		},
		"informationLeakagePrevention": {
			"emailExistence": "存在しないメールでも同じレスポンス",
			"timingAttack": "常に同じ処理時間",
			"errorMessages": "汎用的なエラーメッセージ使用"
		},
		"passwordRequirements": {
			"minLength": 8,
			"maxLength": 128,
			"uppercase": "必須（最低1文字）",
			"lowercase": "必須（最低1文字）",
			"number": "必須（最低1文字）",
			"special": "推奨（強度計算に影響）"
		}
	},
	"errorHandling": {
		"strategies": {
			"networkErrors": {
				"detection": "try-catch",
				"message": "ERROR_MESSAGES.NETWORK_ERROR",
				"userAction": "再試行ボタン表示"
			},
			"validationErrors": {
				"detection": "Zod schema.parse",
				"display": "インラインエラー表示",
				"realtime": "入力時即座にバリデーション"
			},
			"authErrors": {
				"tokenExpired": {
					"message": "ERROR_MESSAGES.TOKEN_EXPIRED",
					"action": "/forgot-password へのリンク表示"
				},
				"invalidToken": {
					"message": "トークンが無効です",
					"action": "新規リセット申請へ誘導"
				}
			},
			"rateLimitErrors": {
				"detection": "error.message.includes('rate')",
				"message": "ERROR_MESSAGES.RATE_LIMIT_EXCEEDED",
				"display": "Alert コンポーネントで表示"
			}
		},
		"userFeedback": {
			"success": "Alert コンポーネント（success type）",
			"error": "Alert コンポーネント（error type）",
			"loading": "ボタンローディング状態",
			"validation": "インラインエラーメッセージ"
		}
	},
	"ux": {
		"formValidation": {
			"email": {
				"realtime": true,
				"debounce": "なし（blur時）",
				"feedback": "エラーメッセージ即座表示"
			},
			"password": {
				"strengthIndicator": "リアルタイム強度表示",
				"visibilityToggle": "表示/非表示切替ボタン",
				"confirmMatch": "一致チェック（送信時）"
			}
		},
		"navigation": {
			"forgotPassword": "/login → /forgot-password",
			"resetSuccess": "/reset-password → /login?reset=true",
			"backToLogin": "各画面にログイン画面へのリンク"
		},
		"feedback": {
			"loading": {
				"button": "ローディング中...テキスト",
				"disabled": "フォーム要素を無効化"
			},
			"success": {
				"emailSent": "メール送信成功メッセージ",
				"passwordReset": "リセット完了後ログイン画面へ"
			},
			"error": {
				"inline": "各フィールド下にエラー表示",
				"alert": "画面上部にアラート表示"
			}
		},
		"accessibility": {
			"ariaLabels": "全インタラクティブ要素に設定",
			"ariaDescribedby": "エラーメッセージとの関連付け",
			"keyboardNavigation": "Tab順序、Enter送信対応",
			"screenReader": "適切なラベル、状態通知"
		}
	},
	"testing": {
		"unit": {
			"validationSchemas": "各スキーマのバリデーションテスト",
			"passwordStrengthCalculation": "強度計算ロジックのテスト",
			"composables": "各メソッドの単体テスト"
		},
		"integration": {
			"forgotPasswordFlow": "メール送信フロー全体",
			"resetPasswordFlow": "パスワード更新フロー全体",
			"errorHandling": "各種エラーケースの処理"
		},
		"e2e": {
			"completeFlow": "申請→メール→リセット→ログイン",
			"errorCases": "無効トークン、期限切れ等",
			"accessibility": "キーボード操作、スクリーンリーダー"
		}
	},
	"dependencies": {
		"external": [
			"@lucide/svelte - アイコン",
			"zod - バリデーション",
			"@supabase/supabase-js - 認証"
		],
		"internal": {
			"shared": [
				"components/ui/Button",
				"components/ui/Card",
				"components/ui/Input",
				"components/ui/Label",
				"components/ui/Link",
				"components/ui/Alert",
				"components/ui/ThemeSelector",
				"components/ui/PasswordStrength (新規)",
				"consts/errorMessages",
				"consts/successMessages",
				"consts/routes",
				"consts/validationRules",
				"api/supabase"
			],
			"entities": [
				"auth/ui/ForgotPasswordCard (新規)",
				"auth/ui/ResetPasswordCard (新規)",
				"auth/model/password-reset (新規)"
			],
			"features": ["auth/login/api/supabaseAuth (既存の getCurrentSession を利用)"]
		}
	},
	"implementationNotes": {
		"critical": [
			"FSDアーキテクチャルールを厳守（routes → features → entities → shared）",
			"composableは必ず .svelte.ts 拡張子を使用",
			"entities/ui層を必ず経由（features → entities → shared）",
			"model配下は型定義のみ（ロジック実装禁止）"
		],
		"important": [
			"既存のログイン実装パターンと整合性を保つ",
			"Svelte 5 Runesを使用（$state, $derived, $effect）",
			"TypeScript厳格設定に対応（exactOptionalPropertyTypes: true）",
			"エラーメッセージは定数ファイルから参照"
		],
		"recommendations": [
			"パスワード強度表示で安全なパスワード設定を促進",
			"レート制限エラーは明確にユーザーへフィードバック",
			"トークン無効時は新規申請への導線を提供",
			"セキュリティとUXのバランスを考慮"
		]
	}
}
