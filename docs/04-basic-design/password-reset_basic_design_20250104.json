{
	"problem": "ユーザーがパスワードを忘れた場合、アカウントにアクセスできなくなる問題を解決する必要がある",
	"goals": [
		"ユーザーがメールアドレスを使用して安全にパスワードをリセットできる機能を実装する",
		"リセットプロセス全体でセキュリティを維持し、悪用を防ぐ",
		"既存の認証UIパターンと一貫性のあるユーザー体験を提供する",
		"適切なフィードバックとエラーハンドリングでユーザーを適切に誘導する"
	],
	"acceptanceCriteria": [
		{
			"id": "AC-001",
			"given": "未認証のユーザーがログイン画面にいる",
			"when": "パスワードリセットリンクをクリックする",
			"then": "パスワードリセット申請画面（/forgot-password）に遷移する"
		},
		{
			"id": "AC-002",
			"given": "ユーザーがパスワードリセット申請画面にいる",
			"when": "有効なメールアドレスを入力して送信する",
			"then": "Supabaseからリセットメールが送信され、成功メッセージが表示される"
		},
		{
			"id": "AC-003",
			"given": "ユーザーがパスワードリセット申請画面にいる",
			"when": "無効なメールアドレス形式を入力する",
			"then": "リアルタイムでバリデーションエラーが表示される"
		},
		{
			"id": "AC-004",
			"given": "ユーザーがパスワードリセット申請画面にいる",
			"when": "登録されていないメールアドレスを入力して送信する",
			"then": "セキュリティのため、成功メッセージと同じ表示をする（情報漏洩防止）"
		},
		{
			"id": "AC-005",
			"given": "ユーザーがリセットメールのリンクをクリックした",
			"when": "パスワード再設定画面（/reset-password）が表示される",
			"then": "新しいパスワードと確認用パスワードの入力フィールドが表示される"
		},
		{
			"id": "AC-006",
			"given": "ユーザーがパスワード再設定画面にいる",
			"when": "新しいパスワードを入力する",
			"then": "パスワード強度がリアルタイムで表示される"
		},
		{
			"id": "AC-007",
			"given": "ユーザーがパスワード再設定画面にいる",
			"when": "パスワードと確認用パスワードが一致しない",
			"then": "バリデーションエラーが表示される"
		},
		{
			"id": "AC-008",
			"given": "ユーザーがパスワード再設定画面にいる",
			"when": "有効な新パスワードを入力して送信する",
			"then": "パスワードが更新され、ログイン画面へリダイレクトされる"
		},
		{
			"id": "AC-009",
			"given": "ユーザーがパスワードリセットプロセス中",
			"when": "ネットワークエラーやAPIエラーが発生する",
			"then": "適切なエラーメッセージが表示され、再試行が可能である"
		},
		{
			"id": "AC-010",
			"given": "ユーザーがパスワードリセットトークン付きURLにアクセスする",
			"when": "トークンが無効または期限切れの場合",
			"then": "エラーメッセージが表示され、新しいリセット申請へのリンクが提供される"
		}
	],
	"outOfScope": [
		"多要素認証（MFA）を使用したパスワードリセット",
		"SMS経由でのパスワードリセット",
		"ソーシャルログイン連携アカウントのパスワード管理",
		"管理者による他ユーザーのパスワードリセット",
		"パスワード履歴の管理と重複チェック"
	],
	"design": {
		"api": {
			"endpoints": [
				{
					"method": "POST",
					"path": "/api/auth/forgot-password",
					"request": {
						"email": "string"
					},
					"response": {
						"success": "boolean",
						"message": "string"
					},
					"errorResponses": {
						"400": {
							"error": "Bad Request",
							"message": "Invalid email format"
						},
						"429": {
							"error": "Too Many Requests",
							"message": "Rate limit exceeded, please try again later"
						},
						"500": {
							"error": "Internal Server Error",
							"message": "Failed to send reset email"
						}
					}
				},
				{
					"method": "POST",
					"path": "/api/auth/reset-password",
					"request": {
						"password": "string",
						"confirmPassword": "string",
						"token": "string (from URL)"
					},
					"response": {
						"success": "boolean",
						"message": "string"
					},
					"errorResponses": {
						"400": {
							"error": "Bad Request",
							"message": "Invalid password or token"
						},
						"401": {
							"error": "Unauthorized",
							"message": "Invalid or expired token"
						},
						"422": {
							"error": "Unprocessable Entity",
							"message": "Password does not meet requirements"
						},
						"500": {
							"error": "Internal Server Error",
							"message": "Failed to reset password"
						}
					}
				}
			]
		},
		"dataModel": {
			"prismaSchema": "// パスワードリセット機能ではDBスキーマ変更なし\n// Supabase Authが内部的にauth.usersテーブルを管理\n// リセットトークンはSupabase Authが自動管理"
		},
		"components": {
			"features": [
				"auth/forgot-password/ui/ForgotPasswordForm.svelte",
				"auth/forgot-password/composable/useForgotPassword.svelte.ts",
				"auth/forgot-password/api/forgotPassword.ts",
				"auth/forgot-password/model/forgotPasswordSchema.ts",
				"auth/reset-password/ui/ResetPasswordForm.svelte",
				"auth/reset-password/composable/useResetPassword.svelte.ts",
				"auth/reset-password/api/resetPassword.ts",
				"auth/reset-password/model/resetPasswordSchema.ts"
			],
			"entities": [
				"auth/ui/ForgotPasswordCard.svelte",
				"auth/ui/ResetPasswordCard.svelte",
				"auth/model/password-reset.ts"
			],
			"shared": [
				"components/ui/PasswordStrength.svelte (既存または新規)",
				"components/ui/Button.svelte (既存)",
				"components/ui/Input.svelte (既存)",
				"components/ui/Card.svelte (既存)",
				"components/ui/Alert.svelte (既存)",
				"components/ui/Label.svelte (既存)",
				"components/ui/Link.svelte (既存)"
			],
			"meltUIComponents": []
		},
		"routes": [
			{
				"path": "/forgot-password",
				"component": "routes/forgot-password/+page.svelte",
				"description": "パスワードリセット申請画面"
			},
			{
				"path": "/reset-password",
				"component": "routes/reset-password/+page.svelte",
				"description": "新パスワード設定画面（トークン検証付き）"
			}
		],
		"flowDiagram": {
			"forgotPasswordFlow": [
				"1. ユーザーがログイン画面から「パスワードを忘れた」リンクをクリック",
				"2. /forgot-password ページへ遷移",
				"3. メールアドレス入力フォームを表示",
				"4. useForgotPassword composableでフォーム状態管理",
				"5. zodでメールアドレスバリデーション",
				"6. Supabase auth.resetPasswordForEmail()を呼び出し",
				"7. 成功メッセージ表示（セキュリティ上、常に同じメッセージ）",
				"8. ユーザーはメールを確認"
			],
			"resetPasswordFlow": [
				"1. ユーザーがメール内のリンクをクリック",
				"2. /reset-password?token=xxx へアクセス",
				"3. トークン検証（Supabase自動処理）",
				"4. 新パスワード入力フォーム表示",
				"5. useResetPassword composableで状態管理",
				"6. パスワード強度計算・表示",
				"7. zodでパスワードバリデーション",
				"8. Supabase auth.updateUser()でパスワード更新",
				"9. 成功後、/login?reset=trueへリダイレクト"
			]
		}
	},
	"technicalConsiderations": {
		"security": [
			"メールアドレスの存在確認による情報漏洩を防ぐため、常に同じメッセージを返す",
			"リセットトークンの有効期限をSupabaseデフォルト（1時間）で管理",
			"パスワード要件：最低8文字、大文字小文字数字を含む",
			"レート制限によるブルートフォース攻撃防止"
		],
		"errorHandling": [
			"ネットワークエラー時の再試行機能",
			"トークン期限切れ時の明確なメッセージと再申請への導線",
			"Supabaseエラーコードのユーザーフレンドリーなメッセージへのマッピング"
		],
		"ux": [
			"リアルタイムバリデーションでユーザーの入力ミスを早期に検知",
			"パスワード強度表示で安全なパスワード設定を促進",
			"ローディング状態の明確な表示",
			"成功・エラーメッセージの適切な表示時間"
		]
	},
	"testingStrategy": [
		"E2Eテスト：パスワードリセット全フローの動作確認（Playwright）",
		"ユニットテスト：バリデーションロジック、パスワード強度計算（Vitest）",
		"統合テスト：Supabase APIモックを使用した機能テスト",
		"手動テスト：メール送信、リンククリック、実際のパスワード変更"
	],
	"clarifications": [],
	"status": "confirmed"
}
