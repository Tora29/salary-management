generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Stock {
  id              String   @id @default(cuid())
  symbol          String
  name            String
  quantity        Int
  purchasePrice   Decimal  @db.Decimal(10, 2)
  purchaseDate    DateTime
  currentPrice    Decimal? @db.Decimal(10, 2)
  lastUpdated     DateTime?
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([symbol])
  @@index([userId])
}

model Asset {
  id              String   @id @default(cuid())
  type            String   // "cash", "deposit", etc.
  name            String
  amount          Decimal  @db.Decimal(12, 2)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Auth.js用のユーザー管理モデル
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  salarySlips   SalarySlip[]
  stocks        Stock[]
  assets        Asset[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model SalarySlip {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName     String
  employeeName    String
  employeeId      String
  paymentDate     String
  targetPeriodStart String
  targetPeriodEnd String
  
  // 勤怠情報
  overtimeHours   Float
  overtimeHoursOver60 Float @default(0)
  lateNightHours  Float    @default(0)
  holidayWorkDays Int
  paidLeaveDays   Float    @default(0)
  
  // 収入
  baseSalary      Decimal  @db.Decimal(10, 2)
  overtimePay     Decimal  @db.Decimal(10, 2)
  overtimePayOver60 Decimal @db.Decimal(10, 2) @default(0)
  lateNightPay    Decimal  @db.Decimal(10, 2) @default(0)
  fixedOvertimeAllowance Decimal @db.Decimal(10, 2) @default(0)
  expenseReimbursement Decimal @db.Decimal(10, 2) @default(0)
  transportationAllowance Decimal @db.Decimal(10, 2)
  stockPurchaseIncentive Decimal @db.Decimal(10, 2) @default(0)
  totalEarnings   Decimal  @db.Decimal(10, 2)
  
  // 控除
  healthInsurance Decimal  @db.Decimal(10, 2)
  welfareInsurance Decimal @db.Decimal(10, 2)
  employmentInsurance Decimal @db.Decimal(10, 2)
  incomeTax       Decimal  @db.Decimal(10, 2)
  residentTax     Decimal  @db.Decimal(10, 2)
  otherDeductions Decimal  @db.Decimal(10, 2)
  totalDeductions Decimal  @db.Decimal(10, 2)
  
  // 差引支給額
  netPay          Decimal  @db.Decimal(10, 2)
  
  // ファイル情報
  fileName        String
  uploadedAt      DateTime @default(now())
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([paymentDate])
  @@index([employeeId])
  @@index([userId])
  @@index([userId, paymentDate])
}